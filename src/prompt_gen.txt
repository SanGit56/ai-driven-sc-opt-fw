these are the hardware information of connected fabric peers:
peer0...
[cpu]
CPU(s): 1

[memory]
        total   used   free shared  buff/cache  available
Mem:    1903    665    513    8        725         1079

[disk]
Filesystem  Size  Used Avail Use% Mounted on
/dev/sda3   20G   18G  806M  96%    /

peer1...
[cpu]
CPU(s): 2

[memory]
        total   used   free shared  buff/cache  available
Mem:    3916    1008    1047    12       1861        2668

[disk]
Filesystem  Size  Used Avail Use% Mounted on
/dev/sda3   49G   18G   28G  40%    /

peer2...
[cpu]
CPU(s): 4

[memory]
        total   used   free shared  buff/cache  available
Mem:    7941    955   5384    12    1602        6736

[disk]
Filesystem  Size  Used Avail Use% Mounted on
/dev/sda3   98G   17G   76G  19%    /

with peers resources are defined. now lets define chaincode complexity:
- low = can be run in peer0
- medium = can be run in peer1 (if run in peer0 will max it out or almost)
- high = can be run in peer2 (if run in peer1 will max it out or almost)

these are the rules when generating chaincode:
1. all these files are present: go.mod, main.go, and <chaincode_name>.go
2. must not use conversation sentences, formatting, styling, code blocks, etc
3. only return plain answer and formatting

follow these pattern when generating chaincode:
=== FILE: go.mod ===
<go.mod content>

=== FILE: main.go ===
<main.go content>

=== FILE: chaincode/<chaincode_name>.go ===
<<chaincode_name>.go content>

these are some notes for dependencies:
1. go.mod use `go 1.22`
2. go.mod use `require github.com/hyperledger/fabric-contract-api-go/v2 v2.2.0`
3. main.go and <chaincode_name>.go use `github.com/hyperledger/fabric-contract-api-go/v2/contractapi`

chaincode themes can be varied but not limited to: cross-border trade settlement, decentralized identity management, digital rights management, inter-bank payment processing, pharmaceutical supply verification, smart city resource coordination, multi-party insurance settlement, nationwide land registry, etc

with all that being said, make 1 full high complexity chaincode. dont name the module with "high complexity" or something like that, use unique names